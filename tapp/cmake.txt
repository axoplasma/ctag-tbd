
add_definitions(
        -DRAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY=4096 # rapidjson
        -DRAPIDJSON_HAS_STDSTRING=1 # rapidjson
)

# everything static linking
# set(CMAKE_FIND_LIBRARY_SUFFIXES ".a") # uncommented to link static: MB 20201206
# set(BUILD_SHARED_LIBS OFF) # MB uncommented to link static: 20201206
# set(CMAKE_EXE_LINKER_FLAGS "-static") # MB uncommented to link static: 20201206
# set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++ -static") # uncommented to link static: MB 20201206

# link boost statically
set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.67.0 COMPONENTS system thread filesystem program_options REQUIRED)

## Web Server Part
add_library(simple-web-server INTERFACE)
target_include_directories(simple-web-server INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/../simulator/Simple-Web-Server)
find_package(Threads REQUIRED)
target_link_libraries(simple-web-server INTERFACE ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(simple-web-server INTERFACE ${Boost_LIBRARIES})
target_include_directories(simple-web-server INTERFACE ${Boost_INCLUDE_DIR})
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.9)
    target_compile_definitions(simple-web-server INTERFACE USE_BOOST_REGEX)
    find_package(Boost 1.67.0 COMPONENTS regex REQUIRED)
    target_link_libraries(simple-web-server INTERFACE ${Boost_LIBRARIES})
    target_include_directories(simple-web-server INTERFACE ${Boost_INCLUDE_DIR})
endif()


#rapidjson
file(GLOB RAPIDJSON_FILES
        ${CMAKE_SOURCE_DIR}/../components/rapidjson/rapidjson/*.h
)

# imgui
# list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake/sdl2)   # https:stackoverflow.com/questions/28395833/using-sdl2-with-cmake
# find_package(SDL2 REQUIRED) # https://stackoverflow.com/questions/28395833/using-sdl2-with-cmake
# set(SDL2_DIR ${CMAKE_SOURCE_DIR}/imgui/SDL2)    # MB 20211206
# set(SDL2_LIB ${CMAKE_SOURCE_DIR}/imgui/SDL2/lib)    # MB 20211206
# set(SDL2_SDL2_LIB ${CMAKE_SOURCE_DIR}/imgui/SDL2/lib/libSDL2.a)    # MB 20211206
# ??? target_link_libraries(${PROJECT_NAME} SDL2::Main) # https://stackoverflow.com/questions/28395833/using-sdl2-with-cmake

# find_package(SDL2 REQUIRED)   # MB 20211206 substituted with path as below, added a CMakefile there, see: https://stackoverflow.com/questions/28395833/using-sdl2-with-cmake
set(SDL2_DIR ${CMAKE_SOURCE_DIR}/imgui/SDL2)    # MB 20211206
# set(SDL2_LIBRARIES ${CMAKE_SOURCE_DIR}/imgui/SDL2/lib/64bit)   # MB 20211206
set(SDL2_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/imgui/SDL2/include/SDL2)   # MB 20211206
set(IMGUI_DIR ${CMAKE_SOURCE_DIR}/imgui)
set(IMGUI_SRC ${IMGUI_DIR}/backends/imgui_impl_sdl.cpp ${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp ${IMGUI_DIR}/imgui.cpp ${IMGUI_DIR}/imgui_draw.cpp ${IMGUI_DIR}/imgui_tables.cpp ${IMGUI_DIR}/imgui_widgets.cpp)
set(IMGUI_HDR ${IMGUI_DIR} ${IMGUI_DIR}/backends)

#tapp
file(GLOB SRC_FILES *.cpp *.hpp)
add_executable(tapp ${SRC_FILES} ${CMAKE_SOURCE_DIR}/../simulator/fake-idf/esp_heap_caps.c ${IMGUI_SRC})
#target_link_options(tapp PRIVATE -static-libgcc -static-libstdc++)

# target_compile_features(tapp PRIVATE cxx_std_17)

if(WIN32)
    add_compile_options(-mwindows --machine-windows)
    target_link_libraries(tapp -static simple-web-server)
    target_link_libraries(tapp -static ${Boost_LIBRARIES})
    target_link_libraries(tapp -static ws2_32 wsock32)
    # needed for IMGUI / SDL2:
    target_link_libraries(tapp mingw32 )
    target_link_libraries(tapp hidclass hidparse setupapi imagehlp dinput8 dxguid dxerr8 user32 gdi32 winmm imm32 ole32 oleaut32 shell32 version uuid)
    target_link_libraries(tapp gdi32 opengl32 imm32)
    target_link_libraries(tapp sdl2main sdl2)
    target_link_libraries(tapp hid setupapi)
elseif(APPLE)
    target_link_libraries(tapp simple-web-server)
    target_link_libraries(tapp ${Boost_LIBRARIES})
    target_link_options(tapp PRIVATE
            "SHELL:-framework OpenGL"
            "SHELL:-framework Cocoa"
            "SHELL:-framework IOKit"
            "SHELL:-framework CoreVideo")
else() #linux etc?!
    target_link_libraries(tapp simple-web-server)
    target_link_libraries(tapp ${Boost_LIBRARIES})
    target_link_libraries(tapp -static gdi32 opengl32 imm32)
endif()
target_include_directories(tapp PRIVATE ${IMGUI_HDR} ${SDL2_INCLUDE_DIRS})
# target_link_libraries(tapp ${SDL2_LIBRARIES} )
target_include_directories(tapp PRIVATE ${Boost_INCLUDE_DIR})
target_include_directories(tapp PRIVATE ${CMAKE_SOURCE_DIR}/../components/rapidjson)
target_include_directories(tapp PRIVATE ${CMAKE_SOURCE_DIR}/../simulator/fake-idf)
add_dependencies(tapp copy-www)

# copy spiffs files to build folder
add_custom_target(copy-www
        COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${CMAKE_SOURCE_DIR}/../spiffs_image/www
        ${CMAKE_BINARY_DIR}/www
        )

install(CODE "set(CMAKE_INSTALL_LOCAL_ONLY true)")
install(TARGETS tapp RUNTIME DESTINATION .)
install(DIRECTORY ${CMAKE_BINARY_DIR}/www DESTINATION .)

# package generation
set(CPACK_GENERATOR "ZIP")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "tbd-sim")
SET(CPACK_PACKAGE_VENDOR "ctag-tbd")
SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/readme.md")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/../LICENSE")

SET(CPACK_PACKAGE_VERSION_MAJOR "0")
SET(CPACK_PACKAGE_VERSION_MINOR "0")
SET(CPACK_PACKAGE_VERSION_PATCH "1")
#SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CPACK_SYSTEM_NAME}")
include(CPack)